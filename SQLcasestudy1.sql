USE Case_study1;

SELECT * FROM fact_table1;
SELECT * FROM Location_table;
SELECT * FROM Product_table;


-- Display the number of states present in the LocationTable
SELECT COUNT(DISTINCT State) AS NumberOfStates
FROM Location_table;


--How many products are of regular type?

SELECT COUNT(*) AS RegularProductCount
FROM Product_table
WHERE Type = 'Regular';

--How much spending has been done on marketing of product ID 1?
SELECT SUM(Marketing) AS TotalMarketingSpending
FROM fact_table1
WHERE ProductID = 1;

--What is the minimum sales of a product?
SELECT MIN(Sales) AS MinimumSales
FROM fact_table1;

--Display the max Cost of Goods Sold (COGS).
SELECT MAX(COGS) AS MaxCOGS
FROM fact_table1;

-- Display the details of the product where product type is coffee.
SELECT p.ProductID, p.Product, p.Type, f.*
FROM fact_table1 f
JOIN Product_table p ON f.ProductID = p.ProductID
WHERE p.Type = 'Coffee';

--Display the details where total expenses are greater than 40.
SELECT *
FROM fact_table1
WHERE Total_Expenses > 40;

--What is the average sales in area code 719?
SELECT AVG(Sales) AS AverageSales
FROM fact_table1
WHERE Area_Code = 719;

--Find out the total profit generated by Colorado state.
SELECT SUM(f.Profit) AS TotalProfit
FROM fact_table1 f
JOIN Location_table l ON f.Area_Code = l.Area_Code
WHERE l.State = 'Colorado';

--Display the average inventory for each product ID.
SELECT ProductId, AVG(Inventory) AS AverageInventory
FROM fact_table1
GROUP BY ProductId;

--Display state in a sequential order in the Location Table.
SELECT State
FROM Location_table
ORDER BY State;

-- Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT ProductId, AVG(Budget_Profit) AS AverageBudget
FROM fact_table1
GROUP BY ProductId
HAVING AVG(Budget_Margin) > 100;

--What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales
FROM fact_table1
WHERE Date = '2010-01-01';

--Display the average total expense of each product ID on an individual date.
SELECT ProductId, Date, AVG(Total_Expenses) AS AverageTotalExpense
FROM fact_table1
GROUP BY ProductId, Date;

--Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
SELECT F.Date, F.ProductId, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, L.Area_Code
FROM fact_table1 F
JOIN Product_table P ON F.ProductId = P.ProductId
JOIN Location_table L ON F.Area_Code = L.Area_Code;

--Display the rank without any gap to show the sales-wise rank.
SELECT ProductId, Sales,
RANK() OVER (ORDER BY Sales DESC) AS SalesRank
FROM fact_table1;

--Find the state-wise profit and sales.
SELECT L.State, SUM(F.Profit) AS TotalProfit, SUM(F.Sales) AS TotalSales
FROM fact_table1 F
JOIN Location_table L ON F.Area_Code = L.Area_Code
GROUP BY L.State;

--Find the state-wise profit and sales along with the product name.
SELECT L.State, P.Product, SUM(F.Profit) AS TotalProfit, SUM(F.Sales) AS TotalSales
FROM fact_table1 F
JOIN Location_table L ON F.Area_Code = L.Area_Code
JOIN Product_table P ON F.ProductID = P.ProductID
GROUP BY L.State, P.Product;

--If there is an increase in sales of 5%, calculate the increased sales.
SELECT ProductId, Sales, Sales * 1.05 AS IncreasedSales
FROM fact_table1;

--Find the maximum profit along with the product ID and product type.
SELECT F.ProductId, P.Product_Type, MAX(F.Profit) AS MaxProfit
FROM fact_table1 F
JOIN Product_table P ON F.ProductId = P.ProductId
GROUP BY F.ProductId, P.Product_Type;

--Create a stored procedure to fetch the result according to the product type from Product Table.
CREATE PROCEDURE GetProductByType (@Product_Type VARCHAR(50))
AS
BEGIN
    SELECT ProductId, Product, Product_Type
    FROM Product_table
    WHERE Product_Type = @Product_Type;
END;

--Write a query by creating a condition in which if the total expenses are less than 60, then it is a profit or else loss.
SELECT ProductId, Date, 
       CASE 
           WHEN Total_Expenses < 60 THEN 'Profit'
           ELSE 'Loss'
       END AS ProfitOrLoss
FROM fact_table1;

--Give the total weekly sales value with the date and product ID details. Use ROLLUP to pull the data in hierarchical order.
SELECT YEAR(Date) AS Year, DATEPART(WEEK, Date) AS Week, ProductId, SUM(Sales) AS TotalWeeklySales
FROM fact_table1
GROUP BY YEAR(Date), DATEPART(WEEK, Date), ProductId
WITH ROLLUP;

--Apply union and intersection operator on the tables which consist of the attribute area code.
-- UNION example
SELECT Area_Code FROM Location_table
UNION
SELECT Area_Code FROM fact_table1;

-- INTERSECT example
SELECT Area_Code FROM Location_table
INTERSECT
SELECT Area_Code FROM fact_table1;

--Create a user-defined function for the product table to fetch a particular product type based upon the user's preference.
CREATE FUNCTION dbo.GetProductsByType (@Type VARCHAR(50))
RETURNS TABLE
AS
RETURN
    SELECT ProductId, Product, Product_Type
    FROM Product_table
    WHERE Product_Type = @Type;

--Change the product type from coffee to tea where product ID is 1 and undo it.

-- Change product type from Coffee to Tea
UPDATE Product_table
SET Product_Type = 'Tea'
WHERE ProductId = 1 AND Product_Type = 'Coffee';

-- Undo the change (Revert back to Coffee)
UPDATE Product_table
SET Product_Type = 'Coffee'
WHERE ProductId = 1 AND Product_Type = 'Tea';

--Display the date, product ID, and sales where total expenses are between 100 to 200.
SELECT Date, ProductId, Sales
FROM fact_table1
WHERE Total_Expenses BETWEEN 100 AND 200;

--Delete the records in the Product Table for the regular type.
DELETE FROM Product_table
WHERE Product_Type = 'Regular';

--Display the ASCII value of the fifth character from the column Product.
SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharacterASCII
FROM Product_table;






